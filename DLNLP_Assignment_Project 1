{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c7b99d6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: tensorflow in c:\\programdata\\anaconda3\\lib\\site-packages (2.9.1)\n",
      "Requirement already satisfied: tensorboard<2.10,>=2.9 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (2.9.1)\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (1.47.0)\n",
      "Requirement already satisfied: wrapt>=1.11.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (1.12.1)\n",
      "Requirement already satisfied: termcolor>=1.1.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (1.1.0)\n",
      "Requirement already satisfied: flatbuffers<2,>=1.12 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (1.12)\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (3.7.4.3)\n",
      "Requirement already satisfied: setuptools in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (52.0.0.post20210125)\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (0.2.0)\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (0.26.0)\n",
      "Requirement already satisfied: astunparse>=1.6.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (1.6.3)\n",
      "Requirement already satisfied: libclang>=13.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (14.0.1)\n",
      "Requirement already satisfied: six>=1.12.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (1.15.0)\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (3.3.0)\n",
      "Requirement already satisfied: gast<=0.4.0,>=0.2.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (0.4.0)\n",
      "Requirement already satisfied: keras-preprocessing>=1.1.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (1.1.2)\n",
      "Requirement already satisfied: keras<2.10.0,>=2.9.0rc0 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (2.9.0)\n",
      "Requirement already satisfied: tensorflow-estimator<2.10.0,>=2.9.0rc0 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (2.9.0)\n",
      "Requirement already satisfied: h5py>=2.9.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (2.10.0)\n",
      "Requirement already satisfied: numpy>=1.20 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (1.20.1)\n",
      "Requirement already satisfied: absl-py>=1.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (1.2.0)\n",
      "Requirement already satisfied: packaging in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (20.9)\n",
      "Requirement already satisfied: protobuf<3.20,>=3.9.2 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorflow) (3.19.4)\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from astunparse>=1.6.0->tensorflow) (0.36.2)\n",
      "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorboard<2.10,>=2.9->tensorflow) (1.8.1)\n",
      "Requirement already satisfied: google-auth<3,>=1.6.3 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorboard<2.10,>=2.9->tensorflow) (2.9.1)\n",
      "Requirement already satisfied: markdown>=2.6.8 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorboard<2.10,>=2.9->tensorflow) (3.4.1)\n",
      "Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorboard<2.10,>=2.9->tensorflow) (0.6.1)\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorboard<2.10,>=2.9->tensorflow) (2.25.1)\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorboard<2.10,>=2.9->tensorflow) (1.0.1)\n",
      "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from tensorboard<2.10,>=2.9->tensorflow) (0.4.6)\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in c:\\programdata\\anaconda3\\lib\\site-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (4.9)\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (5.2.0)\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (0.2.8)\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.10,>=2.9->tensorflow) (1.3.1)\n",
      "Requirement already satisfied: importlib-metadata>=4.4 in c:\\programdata\\anaconda3\\lib\\site-packages (from markdown>=2.6.8->tensorboard<2.10,>=2.9->tensorflow) (4.12.0)\n",
      "Requirement already satisfied: zipp>=0.5 in c:\\programdata\\anaconda3\\lib\\site-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.10,>=2.9->tensorflow) (3.4.1)\n",
      "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in c:\\programdata\\anaconda3\\lib\\site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (0.4.8)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (2020.12.5)\n",
      "Requirement already satisfied: idna<3,>=2.5 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (2.10)\n",
      "Requirement already satisfied: chardet<5,>=3.0.2 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (4.0.0)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (1.26.4)\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.10,>=2.9->tensorflow) (3.2.0)\n",
      "Requirement already satisfied: pyparsing>=2.0.2 in c:\\programdata\\anaconda3\\lib\\site-packages (from packaging->tensorflow) (2.4.7)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install tensorflow"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40587bbf",
   "metadata": {},
   "source": [
    "# Importing All the libraries\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a27b73d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c3a5c25b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6afc5057",
   "metadata": {},
   "outputs": [],
   "source": [
    "import keras\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout\n",
    "from keras.optimizers import Adam\n",
    "from keras.callbacks import TensorBoard\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "from sklearn.metrics import accuracy_score\n",
    "from keras.utils import np_utils\n",
    "import itertools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb917ef8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "85e8e267",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train : [[0.1882353  0.19215687 0.1764706  ... 0.18431373 0.18039216 0.18039216]\n",
      " [0.23529412 0.23529412 0.24313726 ... 0.1254902  0.13333334 0.13333334]\n",
      " [0.15294118 0.17254902 0.20784314 ... 0.11372549 0.10196079 0.11372549]\n",
      " ...\n",
      " [0.44705883 0.45882353 0.44705883 ... 0.38431373 0.3764706  0.38431373]\n",
      " [0.4117647  0.4117647  0.41960785 ... 0.21176471 0.18431373 0.16078432]\n",
      " [0.45490196 0.44705883 0.45882353 ... 0.37254903 0.39215687 0.39607844]]\n",
      "Y-train shape: [ 0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1  1\n",
      "  2  2  2  2  2  2  2  2  2  2  2  2  3  3  3  3  3  3  3  3  3  3  3  3\n",
      "  4  4  4  4  4  4  4  4  4  4  4  4  5  5  5  5  5  5  5  5  5  5  5  5\n",
      "  6  6  6  6  6  6  6  6  6  6  6  6  7  7  7  7  7  7  7  7  7  7  7  7\n",
      "  8  8  8  8  8  8  8  8  8  8  8  8  9  9  9  9  9  9  9  9  9  9  9  9\n",
      " 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11\n",
      " 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13\n",
      " 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15\n",
      " 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17\n",
      " 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19]\n",
      "x_test shape: (160, 10304)\n"
     ]
    }
   ],
   "source": [
    "#load dataset\n",
    "df = np.load('C:\\\\Users\\\\singh\\\\OneDrive\\\\Desktop\\\\FORE\\\\TERM 4\\\\ORL_faces\\\\ORL_faces.npz') \n",
    "\n",
    "# load the \"Train Images\"\n",
    "x_train = df['trainX']\n",
    "#normalize every image\n",
    "x_train = np.array(x_train,dtype='float32')/255\n",
    "\n",
    "x_test = df['testX']\n",
    "x_test = np.array(x_test,dtype='float32')/255\n",
    "\n",
    "# load the Label of Images\n",
    "y_train= df['trainY']\n",
    "y_test= df['testY']\n",
    "\n",
    "# show the train and test Data format\n",
    "print('x_train : {}'.format(x_train[:]))\n",
    "print('Y-train shape: {}'.format(y_train))\n",
    "print('x_test shape: {}'.format(x_test.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d8a431e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_valid, y_train, y_valid= train_test_split(\n",
    "    x_train, y_train, test_size=.05, random_state=1234,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a9c01859",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train shape: 228\n",
      "x_test shape: (160,)\n"
     ]
    }
   ],
   "source": [
    "im_rows=112\n",
    "im_cols=92\n",
    "batch_size=512\n",
    "im_shape=(im_rows, im_cols, 1)\n",
    "\n",
    "#change the size of images\n",
    "x_train = x_train.reshape(x_train.shape[0], *im_shape)\n",
    "x_test = x_test.reshape(x_test.shape[0], *im_shape)\n",
    "x_valid = x_valid.reshape(x_valid.shape[0], *im_shape)\n",
    "\n",
    "print('x_train shape: {}'.format(y_train.shape[0]))\n",
    "print('x_test shape: {}'.format(y_test.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "3c62d31c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#filters= the depth of output image or kernels\n",
    "\n",
    "cnn_model= Sequential([\n",
    "    Conv2D(filters=36, kernel_size=7, activation='relu', input_shape= im_shape),\n",
    "    MaxPooling2D(pool_size=2),\n",
    "    Conv2D(filters=54, kernel_size=5, activation='relu', input_shape= im_shape),\n",
    "    MaxPooling2D(pool_size=2),\n",
    "    Flatten(),\n",
    "    Dense(2024, activation='relu'),\n",
    "     Dropout(0.5),\n",
    "    Dense(1024, activation='relu'),\n",
    "    Dropout(0.5),\n",
    "    Dense(512, activation='relu'),\n",
    "    Dropout(0.5),\n",
    "    #20 is the number of outputs\n",
    "    Dense(20, activation='softmax')  \n",
    "])\n",
    "\n",
    "cnn_model.compile(\n",
    "    loss='sparse_categorical_crossentropy',#'categorical_crossentropy',\n",
    "    optimizer=Adam(learning_rate=0.0001),\n",
    "    metrics=['accuracy']\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b97ce416",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_3\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d_6 (Conv2D)           (None, 106, 86, 36)       1800      \n",
      "                                                                 \n",
      " max_pooling2d_6 (MaxPooling  (None, 53, 43, 36)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_7 (Conv2D)           (None, 49, 39, 54)        48654     \n",
      "                                                                 \n",
      " max_pooling2d_7 (MaxPooling  (None, 24, 19, 54)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " flatten_3 (Flatten)         (None, 24624)             0         \n",
      "                                                                 \n",
      " dense_12 (Dense)            (None, 2024)              49841000  \n",
      "                                                                 \n",
      " dropout_9 (Dropout)         (None, 2024)              0         \n",
      "                                                                 \n",
      " dense_13 (Dense)            (None, 1024)              2073600   \n",
      "                                                                 \n",
      " dropout_10 (Dropout)        (None, 1024)              0         \n",
      "                                                                 \n",
      " dense_14 (Dense)            (None, 512)               524800    \n",
      "                                                                 \n",
      " dropout_11 (Dropout)        (None, 512)               0         \n",
      "                                                                 \n",
      " dense_15 (Dense)            (None, 20)                10260     \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 52,500,114\n",
      "Trainable params: 52,500,114\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "cnn_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "416bf7a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/260\n",
      "1/1 - 6s - loss: 3.0098 - accuracy: 0.0482 - val_loss: 3.0118 - val_accuracy: 0.0833 - 6s/epoch - 6s/step\n",
      "Epoch 2/260\n",
      "1/1 - 3s - loss: 3.0175 - accuracy: 0.0526 - val_loss: 3.0034 - val_accuracy: 0.0833 - 3s/epoch - 3s/step\n",
      "Epoch 3/260\n",
      "1/1 - 3s - loss: 3.0419 - accuracy: 0.0658 - val_loss: 3.0055 - val_accuracy: 0.0833 - 3s/epoch - 3s/step\n",
      "Epoch 4/260\n",
      "1/1 - 2s - loss: 3.0253 - accuracy: 0.0833 - val_loss: 3.0060 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 5/260\n",
      "1/1 - 2s - loss: 3.0334 - accuracy: 0.0702 - val_loss: 3.0067 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 6/260\n",
      "1/1 - 2s - loss: 2.9916 - accuracy: 0.0833 - val_loss: 3.0121 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 7/260\n",
      "1/1 - 2s - loss: 3.0168 - accuracy: 0.0526 - val_loss: 3.0105 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 8/260\n",
      "1/1 - 2s - loss: 3.0076 - accuracy: 0.0526 - val_loss: 3.0054 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 9/260\n",
      "1/1 - 2s - loss: 3.0355 - accuracy: 0.0614 - val_loss: 3.0016 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 10/260\n",
      "1/1 - 2s - loss: 2.9826 - accuracy: 0.0921 - val_loss: 2.9976 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 11/260\n",
      "1/1 - 2s - loss: 2.9782 - accuracy: 0.0482 - val_loss: 2.9911 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 12/260\n",
      "1/1 - 2s - loss: 2.9769 - accuracy: 0.0789 - val_loss: 2.9855 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 13/260\n",
      "1/1 - 2s - loss: 2.9681 - accuracy: 0.0614 - val_loss: 2.9813 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 14/260\n",
      "1/1 - 2s - loss: 2.9644 - accuracy: 0.1053 - val_loss: 2.9771 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 15/260\n",
      "1/1 - 2s - loss: 2.9662 - accuracy: 0.0877 - val_loss: 2.9738 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 16/260\n",
      "1/1 - 2s - loss: 2.9524 - accuracy: 0.1009 - val_loss: 2.9720 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 17/260\n",
      "1/1 - 2s - loss: 2.9474 - accuracy: 0.0965 - val_loss: 2.9709 - val_accuracy: 0.0833 - 2s/epoch - 2s/step\n",
      "Epoch 18/260\n",
      "1/1 - 2s - loss: 2.9441 - accuracy: 0.1053 - val_loss: 2.9697 - val_accuracy: 0.0833 - 2s/epoch - 2s/step\n",
      "Epoch 19/260\n",
      "1/1 - 2s - loss: 2.9402 - accuracy: 0.1447 - val_loss: 2.9669 - val_accuracy: 0.0833 - 2s/epoch - 2s/step\n",
      "Epoch 20/260\n",
      "1/1 - 2s - loss: 2.9519 - accuracy: 0.1184 - val_loss: 2.9631 - val_accuracy: 0.0833 - 2s/epoch - 2s/step\n",
      "Epoch 21/260\n",
      "1/1 - 2s - loss: 2.9016 - accuracy: 0.1886 - val_loss: 2.9602 - val_accuracy: 0.0833 - 2s/epoch - 2s/step\n",
      "Epoch 22/260\n",
      "1/1 - 2s - loss: 2.9095 - accuracy: 0.1491 - val_loss: 2.9577 - val_accuracy: 0.0833 - 2s/epoch - 2s/step\n",
      "Epoch 23/260\n",
      "1/1 - 2s - loss: 2.9050 - accuracy: 0.1623 - val_loss: 2.9542 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 24/260\n",
      "1/1 - 2s - loss: 2.8869 - accuracy: 0.1667 - val_loss: 2.9504 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 25/260\n",
      "1/1 - 3s - loss: 2.8820 - accuracy: 0.1711 - val_loss: 2.9454 - val_accuracy: 0.0000e+00 - 3s/epoch - 3s/step\n",
      "Epoch 26/260\n",
      "1/1 - 2s - loss: 2.8889 - accuracy: 0.1447 - val_loss: 2.9385 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 27/260\n",
      "1/1 - 2s - loss: 2.8675 - accuracy: 0.1623 - val_loss: 2.9300 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 28/260\n",
      "1/1 - 2s - loss: 2.8830 - accuracy: 0.1579 - val_loss: 2.9188 - val_accuracy: 0.0000e+00 - 2s/epoch - 2s/step\n",
      "Epoch 29/260\n",
      "1/1 - 2s - loss: 2.8444 - accuracy: 0.1579 - val_loss: 2.9036 - val_accuracy: 0.0833 - 2s/epoch - 2s/step\n",
      "Epoch 30/260\n",
      "1/1 - 2s - loss: 2.8341 - accuracy: 0.1491 - val_loss: 2.8867 - val_accuracy: 0.0833 - 2s/epoch - 2s/step\n",
      "Epoch 31/260\n",
      "1/1 - 2s - loss: 2.8204 - accuracy: 0.1798 - val_loss: 2.8659 - val_accuracy: 0.0833 - 2s/epoch - 2s/step\n",
      "Epoch 32/260\n",
      "1/1 - 2s - loss: 2.7501 - accuracy: 0.2544 - val_loss: 2.8435 - val_accuracy: 0.0833 - 2s/epoch - 2s/step\n",
      "Epoch 33/260\n",
      "1/1 - 2s - loss: 2.7543 - accuracy: 0.2500 - val_loss: 2.8200 - val_accuracy: 0.0833 - 2s/epoch - 2s/step\n",
      "Epoch 34/260\n",
      "1/1 - 3s - loss: 2.7240 - accuracy: 0.2018 - val_loss: 2.7915 - val_accuracy: 0.0833 - 3s/epoch - 3s/step\n",
      "Epoch 35/260\n",
      "1/1 - 2s - loss: 2.7219 - accuracy: 0.2456 - val_loss: 2.7617 - val_accuracy: 0.1667 - 2s/epoch - 2s/step\n",
      "Epoch 36/260\n",
      "1/1 - 2s - loss: 2.6616 - accuracy: 0.2675 - val_loss: 2.7273 - val_accuracy: 0.0833 - 2s/epoch - 2s/step\n",
      "Epoch 37/260\n",
      "1/1 - 2s - loss: 2.6467 - accuracy: 0.2281 - val_loss: 2.6916 - val_accuracy: 0.1667 - 2s/epoch - 2s/step\n",
      "Epoch 38/260\n",
      "1/1 - 2s - loss: 2.6512 - accuracy: 0.2149 - val_loss: 2.6563 - val_accuracy: 0.2500 - 2s/epoch - 2s/step\n",
      "Epoch 39/260\n",
      "1/1 - 2s - loss: 2.5923 - accuracy: 0.2851 - val_loss: 2.6198 - val_accuracy: 0.2500 - 2s/epoch - 2s/step\n",
      "Epoch 40/260\n",
      "1/1 - 2s - loss: 2.5239 - accuracy: 0.2719 - val_loss: 2.5860 - val_accuracy: 0.2500 - 2s/epoch - 2s/step\n",
      "Epoch 41/260\n",
      "1/1 - 2s - loss: 2.5275 - accuracy: 0.2851 - val_loss: 2.5474 - val_accuracy: 0.2500 - 2s/epoch - 2s/step\n",
      "Epoch 42/260\n",
      "1/1 - 3s - loss: 2.5280 - accuracy: 0.2851 - val_loss: 2.5062 - val_accuracy: 0.2500 - 3s/epoch - 3s/step\n",
      "Epoch 43/260\n",
      "1/1 - 3s - loss: 2.4107 - accuracy: 0.3202 - val_loss: 2.4563 - val_accuracy: 0.2500 - 3s/epoch - 3s/step\n",
      "Epoch 44/260\n",
      "1/1 - 2s - loss: 2.4160 - accuracy: 0.2939 - val_loss: 2.4059 - val_accuracy: 0.2500 - 2s/epoch - 2s/step\n",
      "Epoch 45/260\n",
      "1/1 - 2s - loss: 2.3641 - accuracy: 0.2851 - val_loss: 2.3462 - val_accuracy: 0.3333 - 2s/epoch - 2s/step\n",
      "Epoch 46/260\n",
      "1/1 - 2s - loss: 2.3048 - accuracy: 0.3377 - val_loss: 2.2833 - val_accuracy: 0.5000 - 2s/epoch - 2s/step\n",
      "Epoch 47/260\n",
      "1/1 - 2s - loss: 2.2786 - accuracy: 0.3377 - val_loss: 2.2286 - val_accuracy: 0.5833 - 2s/epoch - 2s/step\n",
      "Epoch 48/260\n",
      "1/1 - 2s - loss: 2.2330 - accuracy: 0.3904 - val_loss: 2.1729 - val_accuracy: 0.6667 - 2s/epoch - 2s/step\n",
      "Epoch 49/260\n",
      "1/1 - 2s - loss: 2.1350 - accuracy: 0.4035 - val_loss: 2.1214 - val_accuracy: 0.6667 - 2s/epoch - 2s/step\n",
      "Epoch 50/260\n",
      "1/1 - 3s - loss: 2.1419 - accuracy: 0.3640 - val_loss: 2.0674 - val_accuracy: 0.6667 - 3s/epoch - 3s/step\n",
      "Epoch 51/260\n",
      "1/1 - 2s - loss: 2.0249 - accuracy: 0.4254 - val_loss: 2.0096 - val_accuracy: 0.6667 - 2s/epoch - 2s/step\n",
      "Epoch 52/260\n",
      "1/1 - 2s - loss: 1.9918 - accuracy: 0.4342 - val_loss: 1.9509 - val_accuracy: 0.6667 - 2s/epoch - 2s/step\n",
      "Epoch 53/260\n",
      "1/1 - 3s - loss: 1.9291 - accuracy: 0.4167 - val_loss: 1.8975 - val_accuracy: 0.6667 - 3s/epoch - 3s/step\n",
      "Epoch 54/260\n",
      "1/1 - 3s - loss: 1.9894 - accuracy: 0.4211 - val_loss: 1.8439 - val_accuracy: 0.6667 - 3s/epoch - 3s/step\n",
      "Epoch 55/260\n",
      "1/1 - 2s - loss: 1.8246 - accuracy: 0.4825 - val_loss: 1.7921 - val_accuracy: 0.6667 - 2s/epoch - 2s/step\n",
      "Epoch 56/260\n",
      "1/1 - 2s - loss: 1.8153 - accuracy: 0.5088 - val_loss: 1.7351 - val_accuracy: 0.6667 - 2s/epoch - 2s/step\n",
      "Epoch 57/260\n",
      "1/1 - 2s - loss: 1.7538 - accuracy: 0.4781 - val_loss: 1.6610 - val_accuracy: 0.6667 - 2s/epoch - 2s/step\n",
      "Epoch 58/260\n",
      "1/1 - 2s - loss: 1.6764 - accuracy: 0.5263 - val_loss: 1.5751 - val_accuracy: 0.6667 - 2s/epoch - 2s/step\n",
      "Epoch 59/260\n",
      "1/1 - 2s - loss: 1.6313 - accuracy: 0.5351 - val_loss: 1.4989 - val_accuracy: 0.6667 - 2s/epoch - 2s/step\n",
      "Epoch 60/260\n",
      "1/1 - 2s - loss: 1.5746 - accuracy: 0.5702 - val_loss: 1.4288 - val_accuracy: 0.6667 - 2s/epoch - 2s/step\n",
      "Epoch 61/260\n",
      "1/1 - 2s - loss: 1.5476 - accuracy: 0.5746 - val_loss: 1.3662 - val_accuracy: 0.6667 - 2s/epoch - 2s/step\n",
      "Epoch 62/260\n",
      "1/1 - 2s - loss: 1.4631 - accuracy: 0.5965 - val_loss: 1.3025 - val_accuracy: 0.7500 - 2s/epoch - 2s/step\n",
      "Epoch 63/260\n",
      "1/1 - 2s - loss: 1.3240 - accuracy: 0.6360 - val_loss: 1.2229 - val_accuracy: 0.7500 - 2s/epoch - 2s/step\n",
      "Epoch 64/260\n",
      "1/1 - 2s - loss: 1.3480 - accuracy: 0.5833 - val_loss: 1.1165 - val_accuracy: 0.7500 - 2s/epoch - 2s/step\n",
      "Epoch 65/260\n",
      "1/1 - 2s - loss: 1.2742 - accuracy: 0.6272 - val_loss: 0.9991 - val_accuracy: 0.8333 - 2s/epoch - 2s/step\n",
      "Epoch 66/260\n",
      "1/1 - 3s - loss: 1.2639 - accuracy: 0.5877 - val_loss: 0.9246 - val_accuracy: 0.8333 - 3s/epoch - 3s/step\n",
      "Epoch 67/260\n",
      "1/1 - 3s - loss: 1.1447 - accuracy: 0.6842 - val_loss: 0.8748 - val_accuracy: 0.8333 - 3s/epoch - 3s/step\n",
      "Epoch 68/260\n",
      "1/1 - 3s - loss: 1.0704 - accuracy: 0.6623 - val_loss: 0.8551 - val_accuracy: 0.8333 - 3s/epoch - 3s/step\n",
      "Epoch 69/260\n",
      "1/1 - 2s - loss: 1.1306 - accuracy: 0.6623 - val_loss: 0.8123 - val_accuracy: 0.8333 - 2s/epoch - 2s/step\n",
      "Epoch 70/260\n",
      "1/1 - 2s - loss: 1.0447 - accuracy: 0.7149 - val_loss: 0.7581 - val_accuracy: 0.7500 - 2s/epoch - 2s/step\n",
      "Epoch 71/260\n",
      "1/1 - 2s - loss: 0.9881 - accuracy: 0.7544 - val_loss: 0.7014 - val_accuracy: 0.9167 - 2s/epoch - 2s/step\n",
      "Epoch 72/260\n",
      "1/1 - 3s - loss: 0.8661 - accuracy: 0.7632 - val_loss: 0.6496 - val_accuracy: 0.9167 - 3s/epoch - 3s/step\n",
      "Epoch 73/260\n",
      "1/1 - 3s - loss: 0.9293 - accuracy: 0.7500 - val_loss: 0.6031 - val_accuracy: 0.9167 - 3s/epoch - 3s/step\n",
      "Epoch 74/260\n",
      "1/1 - 3s - loss: 0.8730 - accuracy: 0.7675 - val_loss: 0.5593 - val_accuracy: 0.9167 - 3s/epoch - 3s/step\n",
      "Epoch 75/260\n",
      "1/1 - 3s - loss: 0.8653 - accuracy: 0.7632 - val_loss: 0.5302 - val_accuracy: 0.9167 - 3s/epoch - 3s/step\n",
      "Epoch 76/260\n",
      "1/1 - 3s - loss: 0.7751 - accuracy: 0.7982 - val_loss: 0.4789 - val_accuracy: 0.9167 - 3s/epoch - 3s/step\n",
      "Epoch 77/260\n",
      "1/1 - 3s - loss: 0.7944 - accuracy: 0.7763 - val_loss: 0.4181 - val_accuracy: 0.9167 - 3s/epoch - 3s/step\n",
      "Epoch 78/260\n",
      "1/1 - 3s - loss: 0.6761 - accuracy: 0.8289 - val_loss: 0.3639 - val_accuracy: 1.0000 - 3s/epoch - 3s/step\n",
      "Epoch 79/260\n",
      "1/1 - 3s - loss: 0.6947 - accuracy: 0.8421 - val_loss: 0.3274 - val_accuracy: 1.0000 - 3s/epoch - 3s/step\n",
      "Epoch 80/260\n",
      "1/1 - 3s - loss: 0.6784 - accuracy: 0.7982 - val_loss: 0.3056 - val_accuracy: 1.0000 - 3s/epoch - 3s/step\n",
      "Epoch 81/260\n",
      "1/1 - 4s - loss: 0.6113 - accuracy: 0.8333 - val_loss: 0.2908 - val_accuracy: 1.0000 - 4s/epoch - 4s/step\n",
      "Epoch 82/260\n",
      "1/1 - 3s - loss: 0.5875 - accuracy: 0.8509 - val_loss: 0.2772 - val_accuracy: 1.0000 - 3s/epoch - 3s/step\n",
      "Epoch 83/260\n",
      "1/1 - 3s - loss: 0.5240 - accuracy: 0.8728 - val_loss: 0.2531 - val_accuracy: 1.0000 - 3s/epoch - 3s/step\n",
      "Epoch 84/260\n",
      "1/1 - 3s - loss: 0.5183 - accuracy: 0.8509 - val_loss: 0.2273 - val_accuracy: 1.0000 - 3s/epoch - 3s/step\n",
      "Epoch 85/260\n",
      "1/1 - 2s - loss: 0.4684 - accuracy: 0.8640 - val_loss: 0.2065 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 86/260\n",
      "1/1 - 2s - loss: 0.5483 - accuracy: 0.8202 - val_loss: 0.1973 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 87/260\n",
      "1/1 - 2s - loss: 0.4682 - accuracy: 0.8553 - val_loss: 0.1992 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 88/260\n",
      "1/1 - 2s - loss: 0.4019 - accuracy: 0.8991 - val_loss: 0.1945 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 89/260\n",
      "1/1 - 2s - loss: 0.4787 - accuracy: 0.8553 - val_loss: 0.1906 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 90/260\n",
      "1/1 - 2s - loss: 0.4344 - accuracy: 0.8728 - val_loss: 0.1734 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 91/260\n",
      "1/1 - 2s - loss: 0.3557 - accuracy: 0.9035 - val_loss: 0.1439 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 92/260\n",
      "1/1 - 2s - loss: 0.3618 - accuracy: 0.8947 - val_loss: 0.1245 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 93/260\n",
      "1/1 - 3s - loss: 0.3630 - accuracy: 0.8904 - val_loss: 0.1144 - val_accuracy: 1.0000 - 3s/epoch - 3s/step\n",
      "Epoch 94/260\n",
      "1/1 - 3s - loss: 0.3094 - accuracy: 0.9167 - val_loss: 0.1070 - val_accuracy: 1.0000 - 3s/epoch - 3s/step\n",
      "Epoch 95/260\n",
      "1/1 - 2s - loss: 0.3017 - accuracy: 0.9079 - val_loss: 0.1043 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 96/260\n",
      "1/1 - 2s - loss: 0.3751 - accuracy: 0.8816 - val_loss: 0.0942 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 97/260\n",
      "1/1 - 3s - loss: 0.2573 - accuracy: 0.9386 - val_loss: 0.0821 - val_accuracy: 1.0000 - 3s/epoch - 3s/step\n",
      "Epoch 98/260\n",
      "1/1 - 2s - loss: 0.2989 - accuracy: 0.9298 - val_loss: 0.0788 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 99/260\n",
      "1/1 - 2s - loss: 0.2713 - accuracy: 0.9035 - val_loss: 0.0738 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 100/260\n",
      "1/1 - 2s - loss: 0.2517 - accuracy: 0.9342 - val_loss: 0.0673 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 101/260\n",
      "1/1 - 2s - loss: 0.2352 - accuracy: 0.9342 - val_loss: 0.0610 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 102/260\n",
      "1/1 - 2s - loss: 0.2048 - accuracy: 0.9430 - val_loss: 0.0596 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 103/260\n",
      "1/1 - 2s - loss: 0.1905 - accuracy: 0.9474 - val_loss: 0.0562 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 104/260\n",
      "1/1 - 2s - loss: 0.1833 - accuracy: 0.9518 - val_loss: 0.0502 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 105/260\n",
      "1/1 - 2s - loss: 0.1791 - accuracy: 0.9693 - val_loss: 0.0426 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 106/260\n",
      "1/1 - 2s - loss: 0.1935 - accuracy: 0.9474 - val_loss: 0.0358 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 107/260\n",
      "1/1 - 2s - loss: 0.1771 - accuracy: 0.9561 - val_loss: 0.0305 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 108/260\n",
      "1/1 - 2s - loss: 0.1771 - accuracy: 0.9518 - val_loss: 0.0313 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 109/260\n",
      "1/1 - 2s - loss: 0.1770 - accuracy: 0.9518 - val_loss: 0.0348 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 110/260\n",
      "1/1 - 2s - loss: 0.1458 - accuracy: 0.9605 - val_loss: 0.0347 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 111/260\n",
      "1/1 - 2s - loss: 0.1754 - accuracy: 0.9386 - val_loss: 0.0297 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 112/260\n",
      "1/1 - 2s - loss: 0.1565 - accuracy: 0.9518 - val_loss: 0.0290 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 113/260\n",
      "1/1 - 2s - loss: 0.1450 - accuracy: 0.9649 - val_loss: 0.0288 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 114/260\n",
      "1/1 - 2s - loss: 0.1210 - accuracy: 0.9781 - val_loss: 0.0343 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 115/260\n",
      "1/1 - 2s - loss: 0.1484 - accuracy: 0.9693 - val_loss: 0.0362 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 116/260\n",
      "1/1 - 2s - loss: 0.1420 - accuracy: 0.9605 - val_loss: 0.0314 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 117/260\n",
      "1/1 - 2s - loss: 0.1048 - accuracy: 0.9781 - val_loss: 0.0228 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 118/260\n",
      "1/1 - 2s - loss: 0.1012 - accuracy: 0.9868 - val_loss: 0.0156 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 119/260\n",
      "1/1 - 2s - loss: 0.1075 - accuracy: 0.9781 - val_loss: 0.0119 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 120/260\n",
      "1/1 - 2s - loss: 0.1560 - accuracy: 0.9649 - val_loss: 0.0112 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 121/260\n",
      "1/1 - 2s - loss: 0.0923 - accuracy: 0.9825 - val_loss: 0.0124 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 122/260\n",
      "1/1 - 2s - loss: 0.1478 - accuracy: 0.9561 - val_loss: 0.0213 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 123/260\n",
      "1/1 - 2s - loss: 0.1142 - accuracy: 0.9781 - val_loss: 0.0317 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 124/260\n",
      "1/1 - 2s - loss: 0.1182 - accuracy: 0.9649 - val_loss: 0.0242 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 125/260\n",
      "1/1 - 2s - loss: 0.0880 - accuracy: 0.9781 - val_loss: 0.0177 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 126/260\n",
      "1/1 - 2s - loss: 0.0919 - accuracy: 0.9825 - val_loss: 0.0152 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 127/260\n",
      "1/1 - 2s - loss: 0.0561 - accuracy: 1.0000 - val_loss: 0.0152 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 128/260\n",
      "1/1 - 2s - loss: 0.1169 - accuracy: 0.9693 - val_loss: 0.0161 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 129/260\n",
      "1/1 - 2s - loss: 0.1053 - accuracy: 0.9737 - val_loss: 0.0158 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 130/260\n",
      "1/1 - 2s - loss: 0.0645 - accuracy: 0.9912 - val_loss: 0.0156 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 131/260\n",
      "1/1 - 2s - loss: 0.0931 - accuracy: 0.9649 - val_loss: 0.0143 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 132/260\n",
      "1/1 - 2s - loss: 0.0645 - accuracy: 0.9912 - val_loss: 0.0133 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 133/260\n",
      "1/1 - 2s - loss: 0.0594 - accuracy: 0.9868 - val_loss: 0.0118 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 134/260\n",
      "1/1 - 2s - loss: 0.0676 - accuracy: 0.9825 - val_loss: 0.0094 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 135/260\n",
      "1/1 - 2s - loss: 0.0918 - accuracy: 0.9868 - val_loss: 0.0075 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 136/260\n",
      "1/1 - 2s - loss: 0.0705 - accuracy: 0.9781 - val_loss: 0.0059 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 137/260\n",
      "1/1 - 2s - loss: 0.0778 - accuracy: 0.9868 - val_loss: 0.0054 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 138/260\n",
      "1/1 - 2s - loss: 0.0894 - accuracy: 0.9781 - val_loss: 0.0049 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 139/260\n",
      "1/1 - 2s - loss: 0.0522 - accuracy: 0.9956 - val_loss: 0.0047 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 140/260\n",
      "1/1 - 2s - loss: 0.0568 - accuracy: 0.9912 - val_loss: 0.0047 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 141/260\n",
      "1/1 - 2s - loss: 0.0452 - accuracy: 0.9956 - val_loss: 0.0046 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 142/260\n",
      "1/1 - 2s - loss: 0.0438 - accuracy: 0.9956 - val_loss: 0.0043 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 143/260\n",
      "1/1 - 2s - loss: 0.0389 - accuracy: 0.9956 - val_loss: 0.0040 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 144/260\n",
      "1/1 - 2s - loss: 0.0425 - accuracy: 0.9912 - val_loss: 0.0036 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 145/260\n",
      "1/1 - 2s - loss: 0.0647 - accuracy: 0.9825 - val_loss: 0.0033 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 146/260\n",
      "1/1 - 2s - loss: 0.0661 - accuracy: 0.9868 - val_loss: 0.0027 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 147/260\n",
      "1/1 - 2s - loss: 0.0421 - accuracy: 0.9956 - val_loss: 0.0025 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 148/260\n",
      "1/1 - 2s - loss: 0.0376 - accuracy: 0.9956 - val_loss: 0.0025 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 149/260\n",
      "1/1 - 2s - loss: 0.0421 - accuracy: 0.9956 - val_loss: 0.0024 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 150/260\n",
      "1/1 - 2s - loss: 0.0454 - accuracy: 0.9868 - val_loss: 0.0025 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 151/260\n",
      "1/1 - 2s - loss: 0.0618 - accuracy: 0.9825 - val_loss: 0.0030 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 152/260\n",
      "1/1 - 2s - loss: 0.0716 - accuracy: 0.9825 - val_loss: 0.0026 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 153/260\n",
      "1/1 - 2s - loss: 0.0261 - accuracy: 1.0000 - val_loss: 0.0022 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 154/260\n",
      "1/1 - 2s - loss: 0.0288 - accuracy: 0.9956 - val_loss: 0.0021 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 155/260\n",
      "1/1 - 2s - loss: 0.0445 - accuracy: 0.9912 - val_loss: 0.0021 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 156/260\n",
      "1/1 - 2s - loss: 0.0288 - accuracy: 1.0000 - val_loss: 0.0021 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 157/260\n",
      "1/1 - 2s - loss: 0.0565 - accuracy: 0.9825 - val_loss: 0.0022 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 158/260\n",
      "1/1 - 2s - loss: 0.0445 - accuracy: 0.9868 - val_loss: 0.0023 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 159/260\n",
      "1/1 - 2s - loss: 0.0512 - accuracy: 0.9825 - val_loss: 0.0026 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 160/260\n",
      "1/1 - 2s - loss: 0.0288 - accuracy: 0.9956 - val_loss: 0.0030 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 161/260\n",
      "1/1 - 2s - loss: 0.0380 - accuracy: 0.9912 - val_loss: 0.0035 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 162/260\n",
      "1/1 - 2s - loss: 0.0249 - accuracy: 1.0000 - val_loss: 0.0041 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 163/260\n",
      "1/1 - 2s - loss: 0.0373 - accuracy: 0.9956 - val_loss: 0.0042 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 164/260\n",
      "1/1 - 2s - loss: 0.0389 - accuracy: 0.9912 - val_loss: 0.0039 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 165/260\n",
      "1/1 - 2s - loss: 0.0240 - accuracy: 1.0000 - val_loss: 0.0037 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 166/260\n",
      "1/1 - 2s - loss: 0.0359 - accuracy: 1.0000 - val_loss: 0.0035 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 167/260\n",
      "1/1 - 2s - loss: 0.0363 - accuracy: 1.0000 - val_loss: 0.0034 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 168/260\n",
      "1/1 - 2s - loss: 0.0304 - accuracy: 0.9956 - val_loss: 0.0033 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 169/260\n",
      "1/1 - 2s - loss: 0.0278 - accuracy: 0.9956 - val_loss: 0.0032 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 170/260\n",
      "1/1 - 2s - loss: 0.0208 - accuracy: 1.0000 - val_loss: 0.0030 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 171/260\n",
      "1/1 - 2s - loss: 0.0261 - accuracy: 0.9956 - val_loss: 0.0025 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 172/260\n",
      "1/1 - 2s - loss: 0.0367 - accuracy: 0.9912 - val_loss: 0.0023 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 173/260\n",
      "1/1 - 2s - loss: 0.0338 - accuracy: 0.9912 - val_loss: 0.0019 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 174/260\n",
      "1/1 - 2s - loss: 0.0251 - accuracy: 1.0000 - val_loss: 0.0015 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 175/260\n",
      "1/1 - 2s - loss: 0.0459 - accuracy: 0.9912 - val_loss: 0.0013 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 176/260\n",
      "1/1 - 2s - loss: 0.0375 - accuracy: 0.9912 - val_loss: 0.0013 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 177/260\n",
      "1/1 - 2s - loss: 0.0481 - accuracy: 0.9868 - val_loss: 0.0014 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 178/260\n",
      "1/1 - 2s - loss: 0.0204 - accuracy: 1.0000 - val_loss: 0.0015 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 179/260\n",
      "1/1 - 2s - loss: 0.0273 - accuracy: 0.9956 - val_loss: 0.0015 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 180/260\n",
      "1/1 - 2s - loss: 0.0230 - accuracy: 0.9956 - val_loss: 0.0013 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 181/260\n",
      "1/1 - 2s - loss: 0.0296 - accuracy: 0.9912 - val_loss: 0.0012 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 182/260\n",
      "1/1 - 2s - loss: 0.0169 - accuracy: 0.9956 - val_loss: 0.0012 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 183/260\n",
      "1/1 - 2s - loss: 0.0283 - accuracy: 0.9956 - val_loss: 0.0011 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 184/260\n",
      "1/1 - 2s - loss: 0.0380 - accuracy: 0.9868 - val_loss: 0.0012 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 185/260\n",
      "1/1 - 2s - loss: 0.0396 - accuracy: 0.9825 - val_loss: 0.0013 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 186/260\n",
      "1/1 - 2s - loss: 0.0271 - accuracy: 0.9956 - val_loss: 0.0014 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 187/260\n",
      "1/1 - 2s - loss: 0.0229 - accuracy: 0.9912 - val_loss: 0.0015 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 188/260\n",
      "1/1 - 2s - loss: 0.0396 - accuracy: 0.9912 - val_loss: 0.0012 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 189/260\n",
      "1/1 - 2s - loss: 0.0162 - accuracy: 1.0000 - val_loss: 9.3583e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 190/260\n",
      "1/1 - 2s - loss: 0.0310 - accuracy: 0.9956 - val_loss: 7.8930e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 191/260\n",
      "1/1 - 2s - loss: 0.0189 - accuracy: 1.0000 - val_loss: 7.1127e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 192/260\n",
      "1/1 - 2s - loss: 0.0310 - accuracy: 0.9912 - val_loss: 7.3037e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 193/260\n",
      "1/1 - 2s - loss: 0.0172 - accuracy: 1.0000 - val_loss: 7.7243e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 194/260\n",
      "1/1 - 2s - loss: 0.0162 - accuracy: 1.0000 - val_loss: 8.9330e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 195/260\n",
      "1/1 - 2s - loss: 0.0202 - accuracy: 1.0000 - val_loss: 0.0011 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 196/260\n",
      "1/1 - 2s - loss: 0.0316 - accuracy: 0.9868 - val_loss: 0.0013 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 197/260\n",
      "1/1 - 2s - loss: 0.0174 - accuracy: 1.0000 - val_loss: 0.0015 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 198/260\n",
      "1/1 - 2s - loss: 0.0197 - accuracy: 1.0000 - val_loss: 0.0014 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 199/260\n",
      "1/1 - 2s - loss: 0.0469 - accuracy: 0.9912 - val_loss: 0.0013 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 200/260\n",
      "1/1 - 2s - loss: 0.0202 - accuracy: 0.9956 - val_loss: 0.0012 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 201/260\n",
      "1/1 - 2s - loss: 0.0274 - accuracy: 0.9912 - val_loss: 0.0010 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 202/260\n",
      "1/1 - 2s - loss: 0.0174 - accuracy: 0.9956 - val_loss: 8.4769e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 203/260\n",
      "1/1 - 2s - loss: 0.0099 - accuracy: 1.0000 - val_loss: 7.4468e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 204/260\n",
      "1/1 - 2s - loss: 0.0127 - accuracy: 1.0000 - val_loss: 6.6232e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 205/260\n",
      "1/1 - 2s - loss: 0.0320 - accuracy: 0.9912 - val_loss: 5.8285e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 206/260\n",
      "1/1 - 2s - loss: 0.0163 - accuracy: 0.9912 - val_loss: 5.3282e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 207/260\n",
      "1/1 - 2s - loss: 0.0117 - accuracy: 1.0000 - val_loss: 5.1622e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 208/260\n",
      "1/1 - 2s - loss: 0.0144 - accuracy: 1.0000 - val_loss: 4.9370e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 209/260\n",
      "1/1 - 2s - loss: 0.0355 - accuracy: 0.9868 - val_loss: 5.3521e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 210/260\n",
      "1/1 - 2s - loss: 0.0175 - accuracy: 1.0000 - val_loss: 6.7945e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 211/260\n",
      "1/1 - 2s - loss: 0.0213 - accuracy: 0.9912 - val_loss: 8.7385e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 212/260\n",
      "1/1 - 2s - loss: 0.0218 - accuracy: 0.9956 - val_loss: 0.0012 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 213/260\n",
      "1/1 - 2s - loss: 0.0230 - accuracy: 0.9956 - val_loss: 0.0013 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 214/260\n",
      "1/1 - 2s - loss: 0.0155 - accuracy: 0.9956 - val_loss: 0.0011 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 215/260\n",
      "1/1 - 2s - loss: 0.0234 - accuracy: 0.9956 - val_loss: 9.7057e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 216/260\n",
      "1/1 - 2s - loss: 0.0145 - accuracy: 1.0000 - val_loss: 8.8044e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 217/260\n",
      "1/1 - 2s - loss: 0.0162 - accuracy: 1.0000 - val_loss: 7.4650e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 218/260\n",
      "1/1 - 2s - loss: 0.0179 - accuracy: 0.9956 - val_loss: 7.3196e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 219/260\n",
      "1/1 - 2s - loss: 0.0122 - accuracy: 1.0000 - val_loss: 7.4242e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 220/260\n",
      "1/1 - 2s - loss: 0.0160 - accuracy: 1.0000 - val_loss: 8.0853e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 221/260\n",
      "1/1 - 2s - loss: 0.0181 - accuracy: 1.0000 - val_loss: 8.1284e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 222/260\n",
      "1/1 - 2s - loss: 0.0236 - accuracy: 0.9956 - val_loss: 8.6325e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 223/260\n",
      "1/1 - 2s - loss: 0.0164 - accuracy: 0.9956 - val_loss: 8.9332e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 224/260\n",
      "1/1 - 2s - loss: 0.0303 - accuracy: 0.9956 - val_loss: 8.7561e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 225/260\n",
      "1/1 - 2s - loss: 0.0135 - accuracy: 1.0000 - val_loss: 8.3045e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 226/260\n",
      "1/1 - 2s - loss: 0.0124 - accuracy: 1.0000 - val_loss: 7.3793e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 227/260\n",
      "1/1 - 2s - loss: 0.0125 - accuracy: 1.0000 - val_loss: 6.0909e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 228/260\n",
      "1/1 - 2s - loss: 0.0193 - accuracy: 1.0000 - val_loss: 5.7772e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 229/260\n",
      "1/1 - 2s - loss: 0.0058 - accuracy: 1.0000 - val_loss: 5.5141e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 230/260\n",
      "1/1 - 2s - loss: 0.0175 - accuracy: 0.9956 - val_loss: 5.9354e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 231/260\n",
      "1/1 - 2s - loss: 0.0097 - accuracy: 1.0000 - val_loss: 6.3285e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 232/260\n",
      "1/1 - 2s - loss: 0.0094 - accuracy: 1.0000 - val_loss: 6.7598e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 233/260\n",
      "1/1 - 2s - loss: 0.0178 - accuracy: 0.9956 - val_loss: 7.1006e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 234/260\n",
      "1/1 - 2s - loss: 0.0203 - accuracy: 0.9956 - val_loss: 7.2793e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 235/260\n",
      "1/1 - 2s - loss: 0.0168 - accuracy: 1.0000 - val_loss: 7.8432e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 236/260\n",
      "1/1 - 2s - loss: 0.0141 - accuracy: 1.0000 - val_loss: 7.6196e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 237/260\n",
      "1/1 - 2s - loss: 0.0298 - accuracy: 0.9825 - val_loss: 6.3107e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 238/260\n",
      "1/1 - 2s - loss: 0.0096 - accuracy: 1.0000 - val_loss: 5.4110e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 239/260\n",
      "1/1 - 2s - loss: 0.0093 - accuracy: 1.0000 - val_loss: 4.6067e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 240/260\n",
      "1/1 - 2s - loss: 0.0113 - accuracy: 1.0000 - val_loss: 4.0741e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 241/260\n",
      "1/1 - 2s - loss: 0.0270 - accuracy: 0.9912 - val_loss: 4.0208e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 242/260\n",
      "1/1 - 2s - loss: 0.0107 - accuracy: 1.0000 - val_loss: 3.8297e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 243/260\n",
      "1/1 - 2s - loss: 0.0170 - accuracy: 1.0000 - val_loss: 4.4322e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 244/260\n",
      "1/1 - 2s - loss: 0.0152 - accuracy: 1.0000 - val_loss: 5.1191e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 245/260\n",
      "1/1 - 2s - loss: 0.0115 - accuracy: 0.9956 - val_loss: 6.0814e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 246/260\n",
      "1/1 - 2s - loss: 0.0141 - accuracy: 1.0000 - val_loss: 6.5657e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 247/260\n",
      "1/1 - 2s - loss: 0.0161 - accuracy: 1.0000 - val_loss: 5.9174e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 248/260\n",
      "1/1 - 2s - loss: 0.0119 - accuracy: 1.0000 - val_loss: 5.6670e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 249/260\n",
      "1/1 - 2s - loss: 0.0108 - accuracy: 1.0000 - val_loss: 5.0554e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 250/260\n",
      "1/1 - 2s - loss: 0.0158 - accuracy: 1.0000 - val_loss: 4.0643e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 251/260\n",
      "1/1 - 2s - loss: 0.0145 - accuracy: 1.0000 - val_loss: 3.5372e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 252/260\n",
      "1/1 - 2s - loss: 0.0140 - accuracy: 1.0000 - val_loss: 3.2828e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 253/260\n",
      "1/1 - 3s - loss: 0.0157 - accuracy: 0.9956 - val_loss: 2.9864e-04 - val_accuracy: 1.0000 - 3s/epoch - 3s/step\n",
      "Epoch 254/260\n",
      "1/1 - 3s - loss: 0.0049 - accuracy: 1.0000 - val_loss: 2.7940e-04 - val_accuracy: 1.0000 - 3s/epoch - 3s/step\n",
      "Epoch 255/260\n",
      "1/1 - 2s - loss: 0.0115 - accuracy: 0.9956 - val_loss: 2.6584e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 256/260\n",
      "1/1 - 3s - loss: 0.0128 - accuracy: 1.0000 - val_loss: 2.7197e-04 - val_accuracy: 1.0000 - 3s/epoch - 3s/step\n",
      "Epoch 257/260\n",
      "1/1 - 3s - loss: 0.0046 - accuracy: 1.0000 - val_loss: 2.8500e-04 - val_accuracy: 1.0000 - 3s/epoch - 3s/step\n",
      "Epoch 258/260\n",
      "1/1 - 2s - loss: 0.0095 - accuracy: 1.0000 - val_loss: 3.1412e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 259/260\n",
      "1/1 - 2s - loss: 0.0258 - accuracy: 0.9912 - val_loss: 3.1421e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n",
      "Epoch 260/260\n",
      "1/1 - 2s - loss: 0.0071 - accuracy: 1.0000 - val_loss: 3.0551e-04 - val_accuracy: 1.0000 - 2s/epoch - 2s/step\n"
     ]
    }
   ],
   "source": [
    "history=cnn_model.fit(\n",
    "    np.array(x_train), np.array(y_train), batch_size=512,\n",
    "    epochs=260, verbose=2,\n",
    "    validation_data=(np.array(x_valid),np.array(y_valid)),\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ce23b9d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test los 0.3891\n",
      "test acc 0.9187\n"
     ]
    }
   ],
   "source": [
    "scor = cnn_model.evaluate( np.array(x_test),  np.array(y_test), verbose=0)\n",
    "\n",
    "print('test los {:.4f}'.format(scor[0]))\n",
    "print('test acc {:.4f}'.format(scor[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "d91d8549",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# list all data in history\n",
    "print(history.history.keys())\n",
    "# summarize history for accuracy\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()\n",
    "# summarize history for loss\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77296cc8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d10da251",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
